{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Spark demo : Part I #\n",
    "\n",
    "In this lab, we will introduce some of Spark's capabilities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "./data/ai.stackexchange.com/Posts.xml MapPartitionsRDD[33] at textFile at NativeMethodAccessorImpl.java:0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_rdd = sc.textFile('./data/ai.stackexchange.com/Posts.xml')\n",
    "my_rdd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[u'  <row Id=\"1311\" PostTypeId=\"2\" ParentId=\"1274\" CreationDate=\"2016-08-04T14:00:13.253\" Score=\"5\" Body=\"&lt;p&gt;As per this &lt;a href=&quot;http://www.dailymail.co.uk/sciencetech/article-2095214/As-scientists-discover-translate-brainwaves-words--Could-machine-read-innermost-thoughts.html&quot; rel=&quot;nofollow&quot;&gt;site&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Researchers recorded the complex patterns of electrical activity generated by someone\\u2019s brain, as the subject listened to someone talking.&#xA;  By feeding those brainwave patterns into a computer, they were able to translate them back into actual words \\u2014 the same words that the volunteer had been hearing.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;strong&gt;The scientists behind the work believe they can now go further and read the unspoken thoughts of people using electrodes placed against the brain.&lt;/strong&gt;&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;In the experiment, each patient listened to a recording of spoken words for five to ten minutes, while the net of electrodes placed under their skull monitored activity in a part of the brain involved in understanding speech called &lt;a href=&quot;https://en.wikipedia.org/wiki/Wernicke%27s_area&quot; rel=&quot;nofollow&quot;&gt;Wernicke\\u2019s area&lt;/a&gt;.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;In one experiment, volunteers looked at black-and-white photographs while the scanner monitored activity in part of the brain that handles vision called the primary visual cortex.&#xA;  A computer predicted accurately the image that the person was looking at purely from the pattern of brain activity.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So AI might be able to read our emotions as well in near future.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I found that &lt;a href=&quot;http://electronics.howstuffworks.com/gadgets/high-tech-gadgets/google-glass-detect-emotions.htm&quot; rel=&quot;nofollow&quot;&gt;google glasses can detect people\\'s emotion&lt;/a&gt; via facial expression, voice tone e.t.c, (just like us), obviously not what they are thinking in their brain.&lt;/p&gt;&#xA;\" OwnerUserId=\"72\" LastEditorUserId=\"145\" LastEditDate=\"2016-08-23T15:25:23.607\" LastActivityDate=\"2016-08-23T15:25:23.607\" CommentCount=\"1\" />',\n",
       " u'  <row Id=\"1958\" PostTypeId=\"2\" ParentId=\"1953\" CreationDate=\"2016-09-13T18:32:15.893\" Score=\"1\" Body=\"&lt;p&gt;One solution to this could involve a fusion of a decision tree and ANN for a multilevel classification.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;A decision tree can help with predicting the possible category of the instance to classify. Then, the ANN at the leaves of the tree can produce the final classification. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, in image recognition, the tree can decide what category of object to identify (eg., landscape, people, vehicles, etc.) and the ANN for the appropriate type can predict exactly what object it is. In vehicles, for example, car, bus, bike, etc. &lt;/p&gt;&#xA;\" OwnerUserId=\"1774\" LastActivityDate=\"2016-09-13T18:32:15.893\" CommentCount=\"0\" />',\n",
       " u'  <row Id=\"2144\" PostTypeId=\"1\" CreationDate=\"2016-10-13T15:00:49.880\" Score=\"7\" ViewCount=\"170\" Body=\"&lt;p&gt;Deepmind just published a &lt;a href=&quot;http://www.nature.com/nature/journal/vaop/ncurrent/full/nature20101.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;paper&lt;/a&gt; about a &lt;a href=&quot;https://deepmind.com/blog/differentiable-neural-computers/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&quot;differentiable neural computer&quot;&lt;/a&gt;, which basically &lt;em&gt;combines a neural network with a memory&lt;/em&gt;. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;The idea is to teach the neural network to create and recall useful explicit memories for a certain task. This complements the abilities of a neural network well, because NNs only store knowledge implicitly in the weights and the information used to work on a single task is only stored in the activation of the network and degrades quickly the more information you add. (&lt;a href=&quot;https://en.wikipedia.org/wiki/Long_short-term_memory&quot; rel=&quot;nofollow noreferrer&quot;&gt;LSTMs&lt;/a&gt; are one try to slow down this degradation of short term memories, but it still happens.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now, instead of keeping the necessary information in the activation, they presumably keep the addresses of memory slots for specific information in the activation, so these should also be subject to degradation. My question is why this approach should scale. Shouldn\\'t a somewhat higher number of task specific information once again overwhelm the networks capability of keeping the addresses of all the appropriate memory slots in its activation?&lt;/p&gt;&#xA;\" OwnerUserId=\"2227\" LastEditorUserId=\"1807\" LastEditDate=\"2017-02-12T14:11:25.480\" LastActivityDate=\"2017-02-12T14:11:25.480\" Title=\"How would Deepmind\\'s new &quot;differentiable neural computer&quot; scale?\" Tags=\"&lt;deep-learning&gt;&lt;ai-design&gt;\" AnswerCount=\"0\" CommentCount=\"0\" />']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_rdd \\\n",
    "    .sample(True, .01) \\\n",
    "    .take(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1738"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_rdd.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1735"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def is_post_row(line):\n",
    "    return re.match('  <row Id=', line) != None\n",
    "\n",
    "# my_rdd.map(is_post_row).take(20)\n",
    "\n",
    "# my_rdd.filter(lambda x: is_post_row(x)==False).collect()\n",
    "\n",
    "row_rdd = my_rdd \\\n",
    "    .filter(is_post_row)\n",
    "\n",
    "test_rows = row_rdd.take(20)\n",
    "\n",
    "row_rdd.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 1, 2, 1, 1, 1, 1, 2, 2, 1]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def extract_post_type_id(line):\n",
    "    matches = re.findall('PostTypeId=\"(\\d+)\"', line)\n",
    "    return int(matches[0])\n",
    "\n",
    "my_rdd \\\n",
    "    .filter(is_post_row) \\\n",
    "    .map(extract_post_type_id) \\\n",
    "    .take(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 604)\n",
      "(2, 1004)\n",
      "(4, 62)\n",
      "(5, 62)\n",
      "(7, 3)\n"
     ]
    }
   ],
   "source": [
    "type_counts = my_rdd \\\n",
    "    .filter(is_post_row) \\\n",
    "    .map(extract_post_type_id) \\\n",
    "    .map(lambda x: (x, 1)) \\\n",
    "    .reduceByKey(lambda x, y: x+y) \\\n",
    "    .sortByKey() \\\n",
    "    .collect()\n",
    "    \n",
    "for tc in type_counts:\n",
    "    print tc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x1121409d0>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY8AAAEWCAYAAACe8xtsAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAHD9JREFUeJzt3XuUXWWd5vHvY4JACAhIOoYkTUAyyEXkEhAbcVB0QEHA\n1tZgo+igoILKMLPkMo7oaBCXl1Z6NY4IKIgEAqLQraCAgmALMSAKISBRArkBQcEQQC7hmT/2W3Co\nVKrOm1TVqUOez1pn1d7v3mfv3zmVnKf2u/d5t2wTERFR4yWdLiAiIrpPwiMiIqolPCIiolrCIyIi\nqiU8IiKiWsIjIiKqJTwi1oCkYyU9KGmFpJd1up6I4ZbwiD5JWiDpifLh+ICk70oauxbbmyLJkkaX\n+ZPLtldI+puklS3zcwfvlfRZyyJJ+5bpD/Xa9z2SzpE0tZ/nbwB8BXij7bG2/zqU9Uaj9fcWnZfw\niP683fZYYDdgGvDpwdqw7VPLB+9Y4CPAr3vmbe84WPtp0/WljpcBbwaeBuZI2n41678CWN92nyHX\nE5ARL2YJjxiQ7cXAFcBOAJK2lHS5pL9Imi/pwz3rStpT0hxJy8sRy9fKol+Wn4+Uv/Bf198+JX1L\n0pd6tf1E0sfL9CJJJ0iaJ+lhSWdLWr9l3YMl/U7SI5JukLRTG69zpe0/2j4a+DVwSh91bQ/MLdMr\nJP1M0uhyVPUxSfOBO8vyHSRdXd6nOyW9s2U74yT9R3mfbpQ0Q9K1Zdm2ktxrvzdI+kDL/IfKNh+W\ndIWkyaW9p5ajy+/mYUmn99rW0eW5j0q6XdJrJJ0k6aJe650h6at9vVeStpL0I0nLJD0k6Rul/SWS\nPiPp3tKt911Jm5Rlb5a0oNd2Wo8CvyBppqTzW2rbrSybCWwJXFHe9+MljZF0gaQ/l9/zbElb9FVv\nDAHbeeSxygNYALy5TE+m+cD8fJn/JXAGsAGwC7AMeFNZ9mvgfWV6LLBXmZ4CGBjdx74+ANzQq+0f\ngPsAlfnxwOPAFmV+EfB7YBKwBXAj8NmybA/ggfJzFPDfgT8CL2157r5l+kPAtX3UdBSweDXvzbbN\nf53n5keX13YlsBmwYXnti4H3l+W7A38GtivPuQSYCYwBdgaW9tTRe/ul7QbgA2X6ncBdwHZl25+l\nOXpqreUymiOpKcBfWn6XhwELSz0C/kv5/U4CVgCblPVeWup9TR+vfzRwO03X3Ubl9e7d8r79Adga\n2LjU8Z2y7M3Agl7bav1dfAF4Ati//N6+3PrvonXdMn8M8KOy/1E0R8djO/1/Z1155Mgj+vMjSY/Q\nfHBdB5xa/sLdGzjB9t9s3wqcRfMhCU2Xz7aStrC9wvaNa7Jj2/8J/A3YtzQdBlxt+6GW1U63vai0\nnVrWgeYD7Azbv3FzNHFOad+jooQlwOaVZZ9q+2HbTwCHAH+wfZ7tZ2zfTPNB9y5J6wGHAv/H9uO2\nfw98r2I/Hyn7usv2MzQfuntKmtiyzhdt/9X2AuBampCHJixPs32zG3+wvdD2Iprg7zk6ehtNeP6u\nj/2/jiawT7D9mO0nbP+qLPtn4Cu277H9KHAy8F5J7X7WXGf7p7ZX0rwnu/Sz7tOljm3L73mO7RVt\n7ifWUsIj+nOo7U1tb2X7Y+VDcUvgL+WDoce9QM8H15E0f83eKek3kg5ai/2fBxxepg9n1Q/Yhb1q\n2LJMbwWcULoyHikBOKGlxnZMpPmLvUZrPVsBe/eq4T2ljvE0fyn3rr9dWwH/1rLdh4BnaY4eetzf\nMv04zZEQNEcZf1zNds+l//e7x2SaI4iVfSzbkhe+lntpjmLGrWZbvfWue6N+1v0ucDUwS9JiSafl\nfNPwSXhErSXA5pI2bmn7e5ouGmzfbfsw4O+ALwGXSNqIpiul1veAd0jaFXgl8O+9lk/uVcOSMr0Q\n+FwJvp7HGNuzKvZ9KHB9Zb2tr3EhcE2vGsbaPpamS+3ZPurv8RiApDEtba/ote0je217Q9s3tVHj\nQpr3si+XArtL2hF4K/D9fraxlaRRfSxbQhNuPf4eeIqma/Mxmm464LkLC17eRs09XvBvyPZTtj9r\ne3vg9cA7aI58YhgkPKKK7YXAfwJflLSBpJ1pjjbOB5B0uKRxtp8FHilPe5bmw+NZYJuKfd0L/I7m\nL+KLbf+t1yrHSpoo6eXASUDPCd9vA8dI2kONsZLeXkJstSSNkrSNpDNoPow+326tfbgc2FHSeyWt\nVx57StrO9tM0XVifk7RhOZn/vpbn3l8eh5eajuKFH8j/D/jf5eQ9kjaV9K426zoL+JSkXct7M7Xn\nZLvtx4Ef0pyL+ZXtJavZxq9pzoecWk5abyhp77JsJnC8mkuzNwZmADPLv4c7gY0l7V+67k4B1muz\nbmhC97l/P5LeJGmn0iW2nKYb69mK7cVaSHjEmjiM5kTsEpoPm1NsX12WHQDMlbQC+AYwvfSJP07z\nQfKr0t2yV5v7Ohd4NX13ocyk6bb4I80J5FMBynmWjwLfBB6mOYF7eB/P77FPqXc58HOav46neTWX\n4rbDzXc/9i/7XUoTBl8Eeq4I+yjNyfUHgLOB77Q818CHac4XPERzAv2mluUXA18DLpa0nObCgf3b\nrGsmzRHhRTSv99JSR4/+3u+ebTwDHARsT3MUch/QE17fLtu+HvgT8CjwyfK8h4GPl30spukWbO2m\nGsipNIH7iKTjaLrILi2vYy7Nv4ULKrYXa6HnSpaIEUnSm2g+XLdxyz9WSYuAw21f26naBpOkD9G8\nnn07XMc2NGE03vZjnawlRrYcecSIJemlNH+1ftv5K2fIle6f44ELEhwxkFyZECOSpFfTfHfjFuD0\nAVaPtaRmfK7FNN/vaasLLNZt6baKiIhq6baKiIhqL9puqy222MJTpkzpdBkREV3l5ptvfsj2gF/q\nfNGGx5QpU5gzZ06ny4iI6CqS2hrtIN1WERFRLeERERHVEh4REVEt4REREdUSHhERUS3hERER1YYs\nPCSdU+5hfHtL2+aSrpJ0d/m5Wcuyk9Tcc/kuSfu3tO8u6bay7HRJGqqaIyKiPUN55PFdmuG5W51I\nc4OcqcA1ZR5JOwDTgR3Lc85oudHMN2mGp55aHr23GRERw2zIwsP2L1n1Np6H0IzlT/l5aEv7hbaf\ntH0PMJ/mnswTgE1s31hGVT2v5TkREdEhw/0N8/G2l5bp+2nu5QzN/aJvbFlvUWl7ukz3bo9eppz4\n406X8JwFpx3Y6RIiYoh17IR5OZIY1CF9JR0laY6kOcuWLRvMTUdERIvhDo8HSlcU5eeDpX0xMLll\nvUmlbXGZ7t3eJ9tn2p5me9q4cQOO6xUREWtouMPjcuCIMn0EcFlL+3RJ60vamubE+OzSxbVc0l7l\nKqv3tzwnIiI6ZMjOeUiaCewLbFHuN30KcBowS9KRwL3AuwFsz5U0C7gDeAY4xvbKsqmP0Vy5tSFw\nRXlEREQHDVl42D5sNYv2W836M4AZfbTPAXYaxNIiImIt5RvmERFRLeERERHVEh4REVEt4REREdUS\nHhERUS3hERER1RIeERFRLeERERHVEh4REVEt4REREdUSHhERUS3hERER1RIeERFRLeERERHVEh4R\nEVEt4REREdUSHhERUS3hERER1RIeERFRLeERERHVEh4REVEt4REREdUSHhERUS3hERER1RIeERFR\nLeERERHVEh4REVEt4REREdUSHhERUS3hERER1RIeERFRLeERERHVEh4REVGtI+Eh6X9Imivpdkkz\nJW0gaXNJV0m6u/zcrGX9kyTNl3SXpP07UXNERDxv2MND0kTgE8A02zsBo4DpwInANbanAteUeSTt\nUJbvCBwAnCFp1HDXHRERz+tUt9VoYENJo4ExwBLgEODcsvxc4NAyfQhwoe0nbd8DzAf2HOZ6IyKi\nxbCHh+3FwFeA+4ClwF9t/wwYb3tpWe1+YHyZnggsbNnEotK2CklHSZojac6yZcuGpP6IiOhMt9Vm\nNEcTWwNbAhtJOrx1HdsGXLtt22fanmZ72rhx4wal3oiIWFUnuq3eDNxje5ntp4FLgX8AHpA0AaD8\nfLCsvxiY3PL8SaUtIiI6pBPhcR+wl6QxkgTsB8wDLgeOKOscAVxWpi8HpktaX9LWwFRg9jDXHBER\nLUYP9w5t3yTpEuAW4Bngt8CZwFhglqQjgXuBd5f150qaBdxR1j/G9srhrjsiIp437OEBYPsU4JRe\nzU/SHIX0tf4MYMZQ1xUREe3JN8wjIqJawiMiIqolPCIiolrCIyIiqiU8IiKiWsIjIiKqJTwiIqJa\nwiMiIqolPCIiolrCIyIiqiU8IiKiWsIjIiKqJTwiIqJawiMiIqolPCIiolrCIyIiqiU8IiKiWsIj\nIiKqJTwiIqJawiMiIqolPCIiolrCIyIiqiU8IiKiWsIjIiKqJTwiIqJawiMiIqq1FR6SXj3UhURE\nRPdo98jjDEmzJX1M0suGtKKIiBjx2goP2/sA/wxMBm6WdIGktwxpZRERMWK1fc7D9t3Ap4ETgP8K\nnC7pTkn/OFTFRUTEyNTuOY+dJf0LMA94E/B229uX6X8ZwvoiImIEGt3mev8KnAWcbPuJnkbbSyR9\nekgqi4iIEavdbqsDgQt6gkPSSySNAbD9vdqdStpU0iWl22uepNdJ2lzSVZLuLj83a1n/JEnzJd0l\naf/a/UVExOBqNzyuBjZsmR9T2tbUN4Arbb8KeA1Nd9iJwDW2pwLXlHkk7QBMB3YEDqC58mvUWuw7\nIiLWUrvdVhvYXtEzY3tFz5FHrXKp7xuAD5RtPQU8JekQYN+y2rnAtTQn5w8BLrT9JHCPpPnAnsCv\n12T/7Zhy4o+HatNrZMFpB3a6hIiIF2j3yOMxSbv1zEjaHXiin/X7szWwDPiOpN9KOkvSRsB420vL\n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\nUS3hERER1f4/4yzEMNjzvqwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111cf7690>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import matplotlib\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x, y = zip(*type_counts)\n",
    "plt.bar(x, y)\n",
    "plt.title(\"PostTypeID frequency counts\")\n",
    "plt.xlabel(\"PostTypeID\")\n",
    "plt.ylabel(\"Frequency\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(datetime.date(2016, 8, 2), 156), (datetime.date(2016, 8, 3), 98), (datetime.date(2016, 8, 4), 71), (datetime.date(2016, 8, 5), 35), (datetime.date(2016, 8, 6), 33), (datetime.date(2016, 8, 7), 28), (datetime.date(2016, 8, 8), 19), (datetime.date(2016, 8, 9), 29), (datetime.date(2016, 8, 10), 23), (datetime.date(2016, 8, 11), 43)]\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "\n",
    "def extract_date(line):\n",
    "    matches = re.findall('CreationDate=\\\"(\\d{4})-(\\d{2})-(\\d{2})', line)\n",
    "    y, m, d = matches[0]\n",
    "    dt = datetime.date(int(y), int(m), int(d))\n",
    "    return dt\n",
    "\n",
    "[extract_date(row) for row in test_rows]\n",
    "\n",
    "date_counts = row_rdd.map(extract_date) \\\n",
    "    .map(lambda date: (date, 1)) \\\n",
    "    .reduceByKey( lambda x, y: x+y) \\\n",
    "    .sortByKey() \\\n",
    "    .collect()\n",
    "\n",
    "print date_counts[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x1122967d0>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAEWCAYAAAB8LwAVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAHHhJREFUeJzt3XucHXWd5vHPQ8IdR4hpMoFEGjTABIQh07C4jgqLFwQl\n6AKb7IARWbOjiLqjK8FxRXcmu6w6jjjKDBEZAjhgQJTMMghJGGAFJDYQhAQwQQRCEtLIYEBuJvnu\nH/XrpOhUd5/uPnWqTvp5v1796qpf3b6nTnc9py6nShGBmZlZXztUXYCZmdWTA8LMzAo5IMzMrJAD\nwszMCjkgzMyskAPCzMwKOSDMmkhSp6SQNLaEeR8jaXWz52vWHweEtT1Jv5b0kqQXJD0t6TJJe4xg\nfqVt5M3aiQPCthcfiIg9gGlAF/DFiusxa3sOCNuuRMRTwI3AoQCS9pG0UNKzklZJ+ljvuJKOktQt\naUPa8/hGGnR7+v1c2it5q6Q3S7pN0m8lPSPpB4OU8lFJayStlfS5tLw/lPSipDfkapgmqUfSjn1n\nIGnXtDf0b5JWAEf2GT5H0qOSnpe0QtIHU/tO6fW+JTfu3mnZHY2uSzPvQtt2RdJk4ATgutR0NfAg\nsA9wMLBI0qMRcQtwIXBhRFyRDkkdmqZ5B/AYsGdEbEzzvQq4GTgW2IlsL2UgxwJTgAOAWyQti4jF\nkm4FTgP+Po13BnB1RPy+YB7nA29KP7uTBV/eo8DbgXXAqcCVkt4cEWslXQ2cDpybxp0JLImInkHq\nNtvCexC2vfixpOeAnwK3Af8rhcXbgHMj4uWIWAZcAnw4TfN74M2SxkfECxHxswHm/3tgP2CfNK+f\nDlLPVyLidxHxAPCPZBtogPlkG24kjUntV/Qzj9OAuRHxbEQ8CXwrPzAiromINRGxOSJ+AKwEjsot\nZ6Ykpf4zBliOWSEHhG0vTo6IPSNiv4j4RES8RLbX8GxEPJ8b73Fg39R9FnAg8LCkn0t6/wDz/zwg\nYKmk5ZI+Okg9T/ZZ5j6p+3pgqqT9gXcDv42Ipf3MY5+C+Wwh6cOSlkl6LoXjocB4gIi4G3gROEbS\nwcCbgYWD1Gz2Gj7EZNuzNcA4Sa/LhcQbgacAImIl2afsHYAPAdem8wPb3OI4ItYBHwOQ9KfAYkm3\nR8SqfpY9GXg4t8w1aT4vS1pAthdxMAN/ql+b5rM8Nx9SDfsB3wWOA+6KiE2SlpGFWK/evZV1wLUR\n8fIAyzLbhvcgbLuVDsvcCfxvSbtIOoxsr+FKAEmnS+qIiM3Ac2myzUBP+n1A77wknSppUur9N7IQ\n2TzA4v+HpN0kHQKcCeRPal8OfAQ4iYEDYgFwnqS90rLPyQ3bPdXQk+o7k63nUHpdCXyQLCQuH2A5\nZoUcELa9mwl0kn2C/xFwfkQsTsOOB5ZLeoHshPWMiHgpIl4E5gJ3pMM3R5NdQXR3Gnch8OmI+NUA\ny70NWAUsAb4eETf3DoiIO8jC5d6IeLyf6QG+QnZY6TGyE+RbwiQiVgB/A9wFPA28BbgjP3EKyHvJ\nguT/DbAcs0LyA4PMWk/SLcA/RcQlJS/nUmBNRPh7ITZkDgizFpN0JLAImNznBHqzl9MJLAOOiIjH\nylqObb98iMmshSTNBxYDnyk5HP6K7PsfX3M42HB5D8LMzAp5D8LMzAq19fcgxo8fH52dnVWXYWbW\nVu65555nImLQ+3K1dUB0dnbS3d1ddRlmZm1F0kCXV29R2iEmSZdKWi/pwT7t50h6ON2u4Ku59vPS\n3TYfkfTesuoyM7PGlLkHcRnwbXLf4JR0LDAdODwiXpG0d2qfCswADiG7/8xiSQdGxKYS6zMzswGU\ntgcREbcDz/Zp/jhwQUS8ksZZn9qnk93y+JV0Sd4qtt6V0szMKtDqq5gOBN4u6e708JXeB6Dsy2vv\nWrmarXfcfA1Js9NDXrp7enxrezOzsrQ6IMYC44Cjgf8OLMjdr74hETEvIroioqujww/HMjMrS6sD\nYjVwXWSWkt2wbDzZ7Zcn58ablNrMzKwirQ6IH5M9ihFJB5I9uvEZsrtjzpC0c3qQyhSgv4eomJlZ\nC5R2FVN6hu8xwHhJq8mer3spcGm69PVVYFZk9/pYnh6isgLYCJztK5jMzKrV1vdi6urqCn9Rzsxs\naCTdExFdg403qu/F1DnnhqpLMDOrrVEdEGZm1j8HhJmZFXJAmJlZIQeEmZkVckCYmVkhB4SZmRVy\nQJiZWSEHhJmZFXJAmJlZIQeEmZkVckCYmVkhB4SZmRVyQJiZWSEHhJmZFXJAmJlZIQeEmZkVckCY\nmVmh0gJC0qWS1qfnT/cd9llJIWl8ru08SaskPSLpvWXVZWZmjSlzD+Iy4Pi+jZImA+8Bnsi1TQVm\nAIekaS6SNKbE2szMbBClBURE3A48WzDob4HPA5Frmw5cHRGvRMRjwCrgqLJqMzOzwbX0HISk6cBT\nEXF/n0H7Ak/m+lentqJ5zJbULam7p6enpErNzKxlASFpN+ALwJdGMp+ImBcRXRHR1dHR0ZzizMxs\nG2NbuKw3AfsD90sCmATcK+ko4Clgcm7cSanNzMwq0rI9iIh4ICL2jojOiOgkO4w0LSLWAQuBGZJ2\nlrQ/MAVY2qrazMxsW2Ve5noVcBdwkKTVks7qb9yIWA4sAFYAPwHOjohNZdVmZmaDK+0QU0TMHGR4\nZ5/+ucDcsuoxM7Oh8TepzcyskAPCzMwKOSDMzKyQA8LMzAo5IMzMrJADwszMCjkgzMyskAPCzMwK\nOSDMzKyQA8LMzAo5IMzMrJADwszMCjkgzMyskAPCzMwKOSDMzKyQA8LMzAo5IMzMrFCZjxy9VNJ6\nSQ/m2r4m6WFJv5D0I0l75oadJ2mVpEckvbesuszMrDFl7kFcBhzfp20RcGhEHAb8EjgPQNJUYAZw\nSJrmIkljSqzNzMwGUVpARMTtwLN92m6OiI2p92fApNQ9Hbg6Il6JiMeAVcBRZdVmZmaDq/IcxEeB\nG1P3vsCTuWGrU5uZmVWkkoCQ9JfARuD7w5h2tqRuSd09PT3NL87MzIAKAkLSR4D3A38WEZGanwIm\n50ablNq2ERHzIqIrIro6OjpKrdXMbDRraUBIOh74PHBSRLyYG7QQmCFpZ0n7A1OApa2szczMXmts\nWTOWdBVwDDBe0mrgfLKrlnYGFkkC+FlE/HlELJe0AFhBdujp7IjYVFZtZmY2uNICIiJmFjR/b4Dx\n5wJzy6rHzMyGxt+kNjOzQg4IMzMr5IAwM7NCDggzMyvkgDAzs0IOCDMzK+SAMDOzQg4IMzMr5IAw\nM7NCDggzMyvkgDAzs0IOCDMzK+SAMDOzQg4IMzMr5IAwM7NCDggzMyvkgDAzs0IOCDMzK1RaQEi6\nVNJ6SQ/m2sZJWiRpZfq9V27YeZJWSXpE0nvLqsvMzBpT5h7EZcDxfdrmAEsiYgqwJPUjaSowAzgk\nTXORpDEl1mZmZoMoLSAi4nbg2T7N04H5qXs+cHKu/eqIeCUiHgNWAUeVVZuZmQ2uoYCQ9JYmLW9C\nRKxN3euACal7X+DJ3HirU1tRLbMldUvq7unpaVJZZmbWV6N7EBdJWirpE5Je34wFR0QAMYzp5kVE\nV0R0dXR0NKMUMzMr0FBARMTbgT8DJgP3SPonSe8exvKeljQRIP1en9qfSvPuNSm1mZlZRRo+BxER\nK4EvAucC7wS+JelhSR8awvIWArNS9yzg+lz7DEk7S9ofmAIsHcJ8h61zzg2tWIyZWdsZ28hIkg4D\nzgROBBYBH4iIeyXtA9wFXFcwzVXAMcB4SauB84ELgAWSzgIeB04DiIjlkhYAK4CNwNkRsWmEr83M\nzEagoYAA/g64BPhCRLzU2xgRayR9sWiCiJjZz7yO62f8ucDcBusxM7OSNRoQJwIv9X6ql7QDsEtE\nvBgRV5RWnZmZVabRcxCLgV1z/bulNjMz2041GhC7RMQLvT2pe7dySjIzszpoNCB+J2lab4+kPwFe\nGmB8MzNrc42eg/gMcI2kNYCAPwT+U2lVmZlZ5RoKiIj4uaSDgYNS0yMR8fvyyjIzs6o1ugcBcCTQ\nmaaZJomIuLyUqszMrHKNflHuCuBNwDKg9wtsATggzMy2U43uQXQBU9MN9szMbBRo9CqmB8lOTJuZ\n2SjR6B7EeGCFpKXAK72NEXFSKVWZmVnlGg2IL5dZhJmZ1U+jl7neJmk/YEpELJa0G+BnRpuZbcca\nfeTox4BrgYtT077Aj8sqyszMqtfoSeqzgbcBG2DLw4P2LqsoMzOrXqMB8UpEvNrbI2ksw3ietJmZ\ntY9GA+I2SV8Adk3Por4G+OfyyjIzs6o1GhBzgB7gAeC/Av9C9nzqYZH03yQtl/SgpKsk7SJpnKRF\nklam33sNd/5mZjZyDQVERGyOiO9GxKkRcUrqHtYhJkn7Ap8CuiLiULKroWaQhdCSiJgCLEn9ZmZW\nkUbvxfQYBeccIuKAESx3V0m/J3vw0BrgPOCYNHw+cCtw7jDnb2ZmIzSUezH12gU4FRg3nAVGxFOS\nvg48QfbQoZsj4mZJEyJibRptHTBhOPM3M7PmaPQQ029yP09FxDeBE4ezwHRuYTqwP7APsLuk0/ss\nL+jnKilJsyV1S+ru6ekZTglmZtaARg8xTcv17kC2RzGUZ0nkvQt4LCJ60ryvA/498LSkiRGxVtJE\nYH3RxBExD5gH0NXV5UttzcxK0uhG/m9y3RuBXwOnDXOZTwBHp9t1vAQcB3QDvwNmARek39cPc/5m\nZtYEjd6L6dhmLTAi7pZ0LXAvWdjcR7ZHsAewQNJZwOMMP4DMzKwJGj3E9BcDDY+IbwxloRFxPnB+\nn+ZXyPYmzMysBoZyFdORwMLU/wFgKbCyjKLMzKx6jQbEJGBaRDwPIOnLwA0RcfqAU5mZWdtq9FYb\nE4BXc/2v4u8pmJlt1xrdg7gcWCrpR6n/ZLJvO5uZ2Xaq0auY5kq6EXh7ajozIu4rrywzM6tao4eY\nILtn0oaIuBBYLWn/kmoyM7MaaPSRo+eT3TjvvNS0I3BlWUWZmVn1Gt2D+CBwEtm3nYmINcDryiqq\n1Trn3FB1CWZmtdNoQLyav4GepN3LK8nMzOqg0YBYIOliYE9JHwMWA98trywzM6tao1cxfT09i3oD\ncBDwpYhYVGplZmZWqUEDQtIYYHG6YZ9DwcxslBj0EFNEbAI2S3p9C+oxM7OaaPSb1C8AD0haRLqS\nCSAiPlVKVWZmVrlGA+K69GNmZqPEgAEh6Y0R8URE+L5LZmajzGDnIH7c2yHphyXXYmZmNTJYQCjX\nfUCZhZiZWb0MFhDRT/eISNpT0rWSHpb0kKS3ShonaZGklen3Xs1anpmZDd1gAXG4pA2SngcOS90b\nJD0vacMIlnsh8JOIOBg4HHgImAMsiYgpwJLUb2ZmFRnwJHVEjGn2AtP3Kd4BfCQt41XgVUnTgWPS\naPOBW8nuIGtmZhUYyvMgmmV/oAf4R0n3Sbok3fxvQkSsTeOso59HmkqaLalbUndPT0+LSjYzG32q\nCIixwDTg7yPiCLIv3r3mcFL+zrF9RcS8iOiKiK6Ojo7SizUzG62qCIjVwOqIuDv1X0sWGE9LmgiQ\nfq+voDYzM0taHhARsQ54UtJBqek4YAWwEJiV2mYB17e6NjMz26rRW2002znA9yXtBPwKOJMsrBZI\nOgt4HDitotrMzIyKAiIilgFdBYOOa3UtZmZWrIpzEGZm1gYcEGZmVsgBYWZmhRwQZmZWyAFhZmaF\nHBBmZlbIAWFmZoUcEGZmVsgBYWZmhRwQZmZWyAFhZmaFHBBmZlbIAWFmZoUcEGZmVsgBYWZmhRwQ\nZmZWyAFhZmaFHBBD0DnnhqpLMDNrmcoCQtIYSfdJ+r+pf5ykRZJWpt97VVWbmZlVuwfxaeChXP8c\nYElETAGWpH4zM6tIJQEhaRJwInBJrnk6MD91zwdObnVdZma2VVV7EN8EPg9szrVNiIi1qXsdMKFo\nQkmzJXVL6u7p6Sm5TDOz0avlASHp/cD6iLinv3EiIoDoZ9i8iOiKiK6Ojo6yyjQzG/XGVrDMtwEn\nSToB2AX4A0lXAk9LmhgRayVNBNZXUJuZmSUt34OIiPMiYlJEdAIzgFsi4nRgITArjTYLuL7VtZmZ\n2VZ1+h7EBcC7Ja0E3pX6zcysIlUcYtoiIm4Fbk3dvwGOq7IeMzPbqk57EJXzN6XNzLZyQJiZWSEH\nhJmZFXJA9OHDTGZmGQeEmZkVckCYmVkhB4SZmRVyQNSQz4OYWR04IAbhjbWZjVYOCDMzK+SAKOC9\nBjMzB0TTOVzMbHvhgDAzs0IOCDMzK+SAMDOzQg4IMzMrVOkDg9qFTzyb2WjU8j0ISZMl/aukFZKW\nS/p0ah8naZGklen3Xq2uzczMtqriENNG4LMRMRU4Gjhb0lRgDrAkIqYAS1K/DZH3dsysWVoeEBGx\nNiLuTd3PAw8B+wLTgflptPnAya2urRHeAJvZaFHpSWpJncARwN3AhIhYmwatAyb0M81sSd2Sunt6\nelpSp5nZaFRZQEjaA/gh8JmI2JAfFhEBRNF0ETEvIroioqujo6MFlZqZjU6VBISkHcnC4fsRcV1q\nflrSxDR8IrC+itryfDjJzEazKq5iEvA94KGI+EZu0EJgVuqeBVzf6tqGo+oQqXr5Zrb9quJ7EG8D\nzgAekLQstX0BuABYIOks4HHgtApqMzOzpOUBERE/BdTP4ONaWYuZmfXPt9qoER8uMrM6cUC0kAPA\n2pn/fkcfB4SZmRVyQJiZWSEHxDC10+52O9VqZvXhgGiiqjbE7RoAVdbdruvMrJUcENsJb/CGbzSu\nu9H4mm3oHBBmZlbIAdEG/GlvZJq5/ur4XrSypmYtq47rcbha9VqqWGcOiCYp+83rO/+qj99vT//g\no0Hv+1XX961Of9/NNtD/S91ftwOiJFVvwBtpaxftXHt/mv2ahju/qtdtGXVX/ZoGMtTaqn4tDggz\nMyvkgBiBoaR7Mz451O3QTr6eRvda+o7fO486va5eI62pjq+pEe1adytsz+cbijggKtKqjWJd/tCG\nopGay3pdI31fyjyJW7f3cqTHz4f6GocyrFXH9lv1t1LVe++AqIGq//EbXX4rN5yN/IMPZWM+2HjD\nDYZG5jvcaZuhkY1wK67yqmIvsZFljiSIh/tBpqiuun4gcEDUWKNXPgx33o1uKPLtQ/2HG8q0g82r\nWeMOVzMOOQ22AW3GhrSZG+ORBGAjw5sxbTNqaNYHiFZczdjK4HBAmJlZIQdEi/X3CaCqyx6b+Qmw\nFZ+ehrrcwdZ1Mw8RDWdvqepDUMNZZisP1w1lr2q466vZ70EZdVSldgEh6XhJj0haJWlO1fWMRs06\nhFXWNGVtoMpcXjMOGw1leSOZf99ltHJdljmvRl7TSIKoVSfGy553Xq0CQtIY4DvA+4CpwExJU6ut\namTq9qmgipOFrVT2hroKZZ6LKlNZ9TUzbBsZp1Xnc+qoVgEBHAWsiohfRcSrwNXA9IprMjMblRQR\nVdewhaRTgOMj4r+k/jOAfxcRn8yNMxuYnXoPAh4Z5uLGA8+MoNxWaYc626FGaI8626FGcJ0jVXVd\n+0VEx2AjjW1FJc0UEfOAeSOdj6TuiOhqQkmlaoc626FGaI8626FGcJ0jVde6+qrbIaangMm5/kmp\nzczMWqxuAfFzYIqk/SXtBMwAFlZck5nZqFSrQ0wRsVHSJ4GbgDHApRGxvKTFjfgwVYu0Q53tUCO0\nR53tUCO4zpGqa12vUauT1GZmVh91O8RkZmY14YAwM7NiEdEWP2RXN/0rsAJYDnw6tY8DFgEr0++9\nUvsb0vgvAN/uM6+dyI4B/hJ4GPiP/SzzT4AHgFXAt9h6SO6Nad73Ab8ATqhpnfsBS1KNt5JdFVZF\nfXOBJ4EX+rTvDPwg1X030FmD97y/Wt8B3AtsBE6pYX1/ker4RXrP9ytjXQKvA5blfp4BvjnEv8tt\n1mVN68yv058Cd9akrj9P7ctSXVNL2+6WNeOmFwoTgWm5lfxLsttxfBWYk9rnAP8nde8O/GlamX3/\nGb8C/HXq3gEY388ylwJHAwJuBN6X2ucBH0/dU4Ff17TOa4BZqfs/AFdUVN/Rabl9N2qfAP4hdc8A\nflCD97y/WjuBw4DL2RoQdarvWGC31P3xMtdln/neA7xjiH+X26zLmtaZX6fnAjfVpK4/yI1zEvCT\n/uY/0p/KN/zDLhyuB95N9k3qibk/rkf6jPeRgn/GJ4HdB5n/RODhXP9M4OLUfTFwbup+K3BnTetc\nDkxO3QI2tLq+PuP33ajdBLw1dY8l+zSlqtblQLXm2i+jz0atTvWlYUcAdwwy/bBrzQ07MNW9zXs2\n0N9lI+uyTnUWrdMa1TUTuLHRv5uh/rTlOQhJnWRv2N3AhIhYmwatAyYMMu2eqfOvJN0r6RpJRdPs\nC6zO9a9ObQBfBk6XtBr4F+CcmtZ5P/Ch1P1B4HWS3tDi+gayL9k/CBGxEfgt2a550fKqrnVANavv\nLLJPnE2vtY/evb4oGDbQ32VDalbnlnVah7oknS3pUbI9mE8NYZlD0nYBIWkP4IfAZyJiQ35YWtFF\nKztvLNmx+DsjYhpwF/D1IZYxE7gsIiYBJwBXSHrNuqxJnZ8D3inpPuCdZN9K31Sj+hpS91rrVJ+k\n04Eu4Gsl1Zo3A7hqOHUOpk515tdpXeqKiO9ExJvIDn19cTjzaERbBYSkHcnenO9HxHWp+WlJE9Pw\nicD6QWbzG+BFoHf6a4BpksZIWpZ+/ifZxnRSbrr8bT/OAhYARMRdwC5kN9+qVZ0RsSYiPhQRRwB/\nmdqea3F9A9lyaxVJY4HXp/luUaNaC9WpPknvInufT4qIV0qqtXdehwNjI+Ke1D+U/5/B5l2bOvPr\nFNhcl7pyrgZObmSZw9E2ASFJwPeAhyLiG7lBC4FZqXsW2bHBfqWU/2fgmNR0HLAiIjZFxB+nny+l\n3cYNko5Oy/5wbt5PpOmQ9EdkAdFTtzoljc/t2ZwHXNrq+gaaR59lngLckt/drlmt26hTfZKOIDs3\ndlJEbLORalatOTPJffod4v/PQK+jNnXm1ynZ/3dd6pqSm8+JZFdQlaO/kxN1+yG7IiDILjnrvUTs\nBLJj1kvSSloMjMtN82vgWbJLzVaTLgcju/zzdrZeEvjGfpbZBTwIPAp8m62XmU0F7iA7xr8MeE9N\n6zwlLe+XwCVkl5VWUd9X03Sb0+8vp/ZdyD4tryK7YuOAGrzn/dV6ZOr/Hdkn/uU1q28x8HSujoVl\nrcs07FfAwYP8z/b3d7nNuqxpnfl1urJGdV1I9ve3jOxS2kPK2u76VhtmZlaobQ4xmZlZazkgzMys\nkAPCzMwKOSDMzKyQA8LMzAo5IMyGQNKm9GWm5ZLul/TZvt+iL5imU9J/blWNZs3igDAbmpci+zLT\nIWQ3a3sfcP4g03QCDghrO/4ehNkQSHohIvbI9R8A/JzsViv7kd1Sffc0+JMRcaeknwF/BDwGzCe7\nt/8FZN+c3hn4TkRc3LIXYdYgB4TZEPQNiNT2HHAQ8DywOSJeTrdDuCoiuiQdA3wuIt6fxp8N7B0R\nfy1pZ7Jv5Z8aEY+19MWYDWJs1QWYbUd2BL4t6Y/J7pp7YD/jvQc4TNIpqf/1wBSyPQyz2nBAmI1A\nOsS0iewunueT3bvncLLzey/3NxlwTkTc1JIizYbJJ6nNhklSB/APZE8MC7I9gbURsRk4AxiTRn2e\n7DGVvW4CPp5ua42kAyXtjlnNeA/CbGh2lbSM7HDSRrKT0r23f74I+KGkDwM/IbtbKWR3AN0k6X6y\nx2xeSHZl073pVs49lHhPf7Ph8klqMzMr5ENMZmZWyAFhZmaFHBBmZlbIAWFmZoUcEGZmVsgBYWZm\nhRwQZmZW6P8DQ5mgUWydAewAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111e89210>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x, y = zip(*date_counts)\n",
    "plt.bar(x, y)\n",
    "plt.title(\"Posts by day\")\n",
    "plt.xlabel(\"Date\")\n",
    "plt.ylabel(\"Frequency\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Exercise 1 ###\n",
    "- Write a regular-expression-based function to parse the \"Score\" field in each row.\n",
    "- What is the range of values for Score?\n",
    "- Which are most common?\n",
    "- Create a bar chart to show the distribution of Score frequencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "Py4JJavaError",
     "evalue": "An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 66.0 failed 1 times, most recent failure: Lost task 1.0 in stage 66.0 (TID 94, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py\", line 174, in main\n    process()\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py\", line 169, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/serializers.py\", line 268, in dump_stream\n    vs = list(itertools.islice(iterator, batch))\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\", line 833, in func\n    yield reduce(f, iterator, initial)\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\", line 1007, in <lambda>\n    return self.reduce(lambda a, b: max(a, b, key=key))\nTypeError: <lambda>() takes exactly 2 arguments (1 given)\n\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRDD.scala:193)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.<init>(PythonRDD.scala:234)\n\tat org.apache.spark.api.python.PythonRunner.compute(PythonRDD.scala:152)\n\tat org.apache.spark.api.python.PythonRDD.compute(PythonRDD.scala:63)\n\tat org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:287)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:99)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:282)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1435)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1423)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1422)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1422)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:802)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:802)\n\tat scala.Option.foreach(Option.scala:257)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:802)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1650)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1605)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1594)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:628)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1918)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1931)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1944)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1958)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:935)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:362)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:934)\n\tat org.apache.spark.api.python.PythonRDD$.collectAndServe(PythonRDD.scala:453)\n\tat org.apache.spark.api.python.PythonRDD.collectAndServe(PythonRDD.scala)\n\tat sun.reflect.GeneratedMethodAccessor78.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:280)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:214)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py\", line 174, in main\n    process()\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py\", line 169, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/serializers.py\", line 268, in dump_stream\n    vs = list(itertools.islice(iterator, batch))\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\", line 833, in func\n    yield reduce(f, iterator, initial)\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\", line 1007, in <lambda>\n    return self.reduce(lambda a, b: max(a, b, key=key))\nTypeError: <lambda>() takes exactly 2 arguments (1 given)\n\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRDD.scala:193)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.<init>(PythonRDD.scala:234)\n\tat org.apache.spark.api.python.PythonRunner.compute(PythonRDD.scala:152)\n\tat org.apache.spark.api.python.PythonRDD.compute(PythonRDD.scala:63)\n\tat org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:287)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:99)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:282)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\t... 1 more\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mPy4JJavaError\u001b[0m                             Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-35-e2dbc7675eb2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mreduce_score\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mreduce_score\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\u001b[0m in \u001b[0;36mmax\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1005\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1006\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1007\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1008\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1009\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\u001b[0m in \u001b[0;36mreduce\u001b[0;34m(self, f)\u001b[0m\n\u001b[1;32m    833\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mreduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    834\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 835\u001b[0;31m         \u001b[0mvals\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmapPartitions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    836\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mvals\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    837\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mreduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\u001b[0m in \u001b[0;36mcollect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    807\u001b[0m         \"\"\"\n\u001b[1;32m    808\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mSCCallSiteSync\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcss\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 809\u001b[0;31m             \u001b[0mport\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jvm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPythonRDD\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollectAndServe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jrdd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrdd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    810\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_load_from_socket\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mport\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jrdd_deserializer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    811\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1131\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         return_value = get_return_value(\n\u001b[0;32m-> 1133\u001b[0;31m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[1;32m   1134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1135\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mpy4j\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoString\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/py4j-0.10.4-src.zip/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    317\u001b[0m                 raise Py4JJavaError(\n\u001b[1;32m    318\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m                     format(target_id, \".\", name), value)\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m                 raise Py4JError(\n",
      "\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 1 in stage 66.0 failed 1 times, most recent failure: Lost task 1.0 in stage 66.0 (TID 94, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py\", line 174, in main\n    process()\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py\", line 169, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/serializers.py\", line 268, in dump_stream\n    vs = list(itertools.islice(iterator, batch))\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\", line 833, in func\n    yield reduce(f, iterator, initial)\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\", line 1007, in <lambda>\n    return self.reduce(lambda a, b: max(a, b, key=key))\nTypeError: <lambda>() takes exactly 2 arguments (1 given)\n\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRDD.scala:193)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.<init>(PythonRDD.scala:234)\n\tat org.apache.spark.api.python.PythonRunner.compute(PythonRDD.scala:152)\n\tat org.apache.spark.api.python.PythonRDD.compute(PythonRDD.scala:63)\n\tat org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:287)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:99)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:282)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1435)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1423)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1422)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1422)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:802)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:802)\n\tat scala.Option.foreach(Option.scala:257)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:802)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1650)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1605)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1594)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:628)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1918)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1931)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1944)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1958)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:935)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:362)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:934)\n\tat org.apache.spark.api.python.PythonRDD$.collectAndServe(PythonRDD.scala:453)\n\tat org.apache.spark.api.python.PythonRDD.collectAndServe(PythonRDD.scala)\n\tat sun.reflect.GeneratedMethodAccessor78.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:280)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:214)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py\", line 174, in main\n    process()\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/worker.py\", line 169, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/serializers.py\", line 268, in dump_stream\n    vs = list(itertools.islice(iterator, batch))\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\", line 833, in func\n    yield reduce(f, iterator, initial)\n  File \"/Users/ceoxxx/spark/spark-2.1.0-bin-hadoop2.7/python/pyspark/rdd.py\", line 1007, in <lambda>\n    return self.reduce(lambda a, b: max(a, b, key=key))\nTypeError: <lambda>() takes exactly 2 arguments (1 given)\n\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRDD.scala:193)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.<init>(PythonRDD.scala:234)\n\tat org.apache.spark.api.python.PythonRunner.compute(PythonRDD.scala:152)\n\tat org.apache.spark.api.python.PythonRDD.compute(PythonRDD.scala:63)\n\tat org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323)\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:287)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:99)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:282)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\t... 1 more\n"
     ]
    }
   ],
   "source": [
    "def extract_score(line):    \n",
    "    matches = re.findall('Score=\"(\\d+)\"', line)\n",
    "    if not matches:\n",
    "        return -999        \n",
    "    return int(matches[0])\n",
    "\n",
    "reduce_score = my_rdd \\\n",
    "    .filter(extract_score) \\\n",
    "    .map(extract_score) \\\n",
    "    .map(lambda x: (x, 1)) \\\n",
    "    .reduceByKey( lambda x, y: x+y) \\\n",
    "    \n",
    "reduce_score.max(lambda x:x[1])  \n",
    "\n",
    "reduce_score.min(lambda x:x[1]) \n",
    "\n",
    "reduce_score.min(lambda x:x[1]) \n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Exercise 2 ###\n",
    "- Write a regular-expression-based function to parse the \"ViewCount\" field in each row.\n",
    "- Write an RDD to compute the average ViewCount.\n",
    "- Create a line plot to show the distribution of ViewCount frequencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Exercise 3 ###\n",
    "- Write a new RDD to parse ViewCount, Score, FavoriteCount, and Date, all within the row value.\n",
    "- Create a scatter plot to show the relationship of ViewCounts and Scores.\n",
    "- Write a different RDD to compute the average ViewCount, grouped by Score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
